"""
Device ORM to pull the various config sources.
"""

from functools import partial
from typing import Callable

from sqlalchemy.orm import Session

from .config import GeneralConfig, LayoutConfig

from .db import Device as device_sql


class Device:
    """
    Create a Device and add autogenerated bindings to Config objects.
    """

    # pylint: disable=missing-docstring
    __slots__ = "client_id", "device_id", "v6_path", "_general", "_layout"

    @staticmethod
    def config_path(path: str) -> Callable[[int, int], 'Device']:
        return partial(Device, v6_path=path)

    def __init__(self, client_id: int, device_id: str, v6_path: str = None):
        self.client_id = client_id
        self.device_id = device_id
        self.v6_path = v6_path
        self._general = None
        self._layout = None

    def sql(self, session: Session) -> device_sql:
        return session.query(device_sql)\
                .filter_by(device_id=self.device_id)\
                .first()

    @property
    def general(self) -> GeneralConfig:
        if self._general is None:
            self._general = GeneralConfig.from_v6_id(self.client_id,
                                                     self.device_id,
                                                     self.v6_path)
        return self._general

    @property
    def layout(self) -> LayoutConfig:
        if self._layout is None:
            self._layout = LayoutConfig.from_v6_id(self.client_id,
                                                   self.device_id,
                                                   self.v6_path)
        return self._layout
